
type Query {
    servidor_publico(
        filtros: Filtros
        first: Int = 10 #Limit
        start: Int = 0 #skip, offset
        #after: cursor
        sort: SortDirection = DESC
        sortBy: SortableField = RFC
        actualizacion: DateRange!
    ): ServidoresPublicos
    servidor_publico_id(id: ID!): ServidorPublico
}

scalar DateTime

input DateRange {
    start: DateTime!
    end: DateTime!
}


input Filtros {
    nombres: String
    primer_apellido: String
    segundo_apellido: String
    institucion: String
}


enum SortDirection{
    ASC,
    DESC
}

enum SortableField {
    RFC,
    nombres,
    primer_apellido,
    segundo_apellido,
    institucion
}

type PageInfo {
    hasNextPage: Boolean!
}

# Response
type ServidoresPublicos{
    totalCount: Int!
    results: [ServidorPublico]!
    pageInfo: PageInfo
}


type Periodo {
    fecha_inicial: DateTime!,
    fecha_final: DateTime!
}

enum Genero {
    M, F, O
}

type Dependencia {
    siglas: String!
    nombre: String!
    clave: String!
}

type Puesto {
    nombre: String,
    nivel: String,
}

enum TipoArea {
    T, RE, RC, O, C, R
}

enum NivelResponsabilidad {
    A, T, R
}

type SuperiorInmediato{
    nombres: String,
    primer_apellido: String,
    segundo_apellido: String,
    curp: String,
    rfc: String,
    puesto: Puesto
}

type ServidorPublico {
    id: String!,
    fecha_captura: DateTime!,
    ejercicio_fiscal: Int!,
    periodo_ejercicio: Periodo,
    id_ramo: Int!,
    ramo: String,
    rfc: String,
    curp: String,
    nombres: String,
    primer_apellido: String,
    segundo_apellido: String,
    genero: Genero,
    dependencia: Dependencia,
    puesto: Puesto
    tipo_area: [TipoArea]!,
    nivel_responsabilidad: [NivelResponsabilidad],
    tipo_procedimiento: Int,
    tipo_actos: String,
    superior_inmediato: SuperiorInmediato
}




